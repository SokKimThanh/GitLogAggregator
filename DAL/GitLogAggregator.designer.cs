#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GitTongHop")]
	public partial class GitLogAggregatorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertWeek(Week instance);
    partial void UpdateWeek(Week instance);
    partial void DeleteWeek(Week instance);
    partial void InsertCommitPeriod(CommitPeriod instance);
    partial void UpdateCommitPeriod(CommitPeriod instance);
    partial void DeleteCommitPeriod(CommitPeriod instance);
    partial void InsertCommit(Commit instance);
    partial void UpdateCommit(Commit instance);
    partial void DeleteCommit(Commit instance);
    partial void InsertCommitSummary(CommitSummary instance);
    partial void UpdateCommitSummary(CommitSummary instance);
    partial void DeleteCommitSummary(CommitSummary instance);
    partial void InsertConfigFile(ConfigFile instance);
    partial void UpdateConfigFile(ConfigFile instance);
    partial void DeleteConfigFile(ConfigFile instance);
    partial void InsertInternshipDirectory(InternshipDirectory instance);
    partial void UpdateInternshipDirectory(InternshipDirectory instance);
    partial void DeleteInternshipDirectory(InternshipDirectory instance);
    partial void InsertSummary(Summary instance);
    partial void UpdateSummary(Summary instance);
    partial void DeleteSummary(Summary instance);
    #endregion
		
		public GitLogAggregatorDataContext() : 
				base(global::DAL.Properties.Settings.Default.GitTongHopConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GitLogAggregatorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GitLogAggregatorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GitLogAggregatorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GitLogAggregatorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<Week> Weeks
		{
			get
			{
				return this.GetTable<Week>();
			}
		}
		
		public System.Data.Linq.Table<CommitPeriod> CommitPeriods
		{
			get
			{
				return this.GetTable<CommitPeriod>();
			}
		}
		
		public System.Data.Linq.Table<Commit> Commits
		{
			get
			{
				return this.GetTable<Commit>();
			}
		}
		
		public System.Data.Linq.Table<CommitSummary> CommitSummaries
		{
			get
			{
				return this.GetTable<CommitSummary>();
			}
		}
		
		public System.Data.Linq.Table<ConfigFile> ConfigFiles
		{
			get
			{
				return this.GetTable<ConfigFile>();
			}
		}
		
		public System.Data.Linq.Table<InternshipDirectory> InternshipDirectories
		{
			get
			{
				return this.GetTable<InternshipDirectory>();
			}
		}
		
		public System.Data.Linq.Table<Summary> Summaries
		{
			get
			{
				return this.GetTable<Summary>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authors")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorID;
		
		private string _AuthorName;
		
		private string _AuthorEmail;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<Commit> _Commits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnAuthorNameChanging(string value);
    partial void OnAuthorNameChanged();
    partial void OnAuthorEmailChanging(string value);
    partial void OnAuthorEmailChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Author()
		{
			this._Commits = new EntitySet<Commit>(new Action<Commit>(this.attach_Commits), new Action<Commit>(this.detach_Commits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AuthorName
		{
			get
			{
				return this._AuthorName;
			}
			set
			{
				if ((this._AuthorName != value))
				{
					this.OnAuthorNameChanging(value);
					this.SendPropertyChanging();
					this._AuthorName = value;
					this.SendPropertyChanged("AuthorName");
					this.OnAuthorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorEmail", DbType="NVarChar(255)")]
		public string AuthorEmail
		{
			get
			{
				return this._AuthorEmail;
			}
			set
			{
				if ((this._AuthorEmail != value))
				{
					this.OnAuthorEmailChanging(value);
					this.SendPropertyChanging();
					this._AuthorEmail = value;
					this.SendPropertyChanged("AuthorEmail");
					this.OnAuthorEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Commit", Storage="_Commits", ThisKey="AuthorID", OtherKey="AuthorID")]
		public EntitySet<Commit> Commits
		{
			get
			{
				return this._Commits;
			}
			set
			{
				this._Commits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Weeks")]
	public partial class Week : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeekId;
		
		private string _WeekName;
		
		private System.DateTime _WeekStartDate;
		
		private System.DateTime _WeekEndDate;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<Commit> _Commits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeekIdChanging(int value);
    partial void OnWeekIdChanged();
    partial void OnWeekNameChanging(string value);
    partial void OnWeekNameChanged();
    partial void OnWeekStartDateChanging(System.DateTime value);
    partial void OnWeekStartDateChanged();
    partial void OnWeekEndDateChanging(System.DateTime value);
    partial void OnWeekEndDateChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Week()
		{
			this._Commits = new EntitySet<Commit>(new Action<Commit>(this.attach_Commits), new Action<Commit>(this.detach_Commits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WeekId
		{
			get
			{
				return this._WeekId;
			}
			set
			{
				if ((this._WeekId != value))
				{
					this.OnWeekIdChanging(value);
					this.SendPropertyChanging();
					this._WeekId = value;
					this.SendPropertyChanged("WeekId");
					this.OnWeekIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string WeekName
		{
			get
			{
				return this._WeekName;
			}
			set
			{
				if ((this._WeekName != value))
				{
					this.OnWeekNameChanging(value);
					this.SendPropertyChanging();
					this._WeekName = value;
					this.SendPropertyChanged("WeekName");
					this.OnWeekNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime WeekStartDate
		{
			get
			{
				return this._WeekStartDate;
			}
			set
			{
				if ((this._WeekStartDate != value))
				{
					this.OnWeekStartDateChanging(value);
					this.SendPropertyChanging();
					this._WeekStartDate = value;
					this.SendPropertyChanged("WeekStartDate");
					this.OnWeekStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime WeekEndDate
		{
			get
			{
				return this._WeekEndDate;
			}
			set
			{
				if ((this._WeekEndDate != value))
				{
					this.OnWeekEndDateChanging(value);
					this.SendPropertyChanging();
					this._WeekEndDate = value;
					this.SendPropertyChanged("WeekEndDate");
					this.OnWeekEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Week_Commit", Storage="_Commits", ThisKey="WeekId", OtherKey="WeekId")]
		public EntitySet<Commit> Commits
		{
			get
			{
				return this._Commits;
			}
			set
			{
				this._Commits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Week = this;
		}
		
		private void detach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.Week = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommitPeriods")]
	public partial class CommitPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeriodID;
		
		private string _PeriodName;
		
		private string _PeriodDuration;
		
		private System.TimeSpan _PeriodStartTime;
		
		private System.TimeSpan _PeriodEndTime;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<Commit> _Commits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodIDChanging(int value);
    partial void OnPeriodIDChanged();
    partial void OnPeriodNameChanging(string value);
    partial void OnPeriodNameChanged();
    partial void OnPeriodDurationChanging(string value);
    partial void OnPeriodDurationChanged();
    partial void OnPeriodStartTimeChanging(System.TimeSpan value);
    partial void OnPeriodStartTimeChanged();
    partial void OnPeriodEndTimeChanging(System.TimeSpan value);
    partial void OnPeriodEndTimeChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public CommitPeriod()
		{
			this._Commits = new EntitySet<Commit>(new Action<Commit>(this.attach_Commits), new Action<Commit>(this.detach_Commits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PeriodName
		{
			get
			{
				return this._PeriodName;
			}
			set
			{
				if ((this._PeriodName != value))
				{
					this.OnPeriodNameChanging(value);
					this.SendPropertyChanging();
					this._PeriodName = value;
					this.SendPropertyChanged("PeriodName");
					this.OnPeriodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodDuration", DbType="NVarChar(50)")]
		public string PeriodDuration
		{
			get
			{
				return this._PeriodDuration;
			}
			set
			{
				if ((this._PeriodDuration != value))
				{
					this.OnPeriodDurationChanging(value);
					this.SendPropertyChanging();
					this._PeriodDuration = value;
					this.SendPropertyChanged("PeriodDuration");
					this.OnPeriodDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodStartTime", DbType="Time NOT NULL")]
		public System.TimeSpan PeriodStartTime
		{
			get
			{
				return this._PeriodStartTime;
			}
			set
			{
				if ((this._PeriodStartTime != value))
				{
					this.OnPeriodStartTimeChanging(value);
					this.SendPropertyChanging();
					this._PeriodStartTime = value;
					this.SendPropertyChanged("PeriodStartTime");
					this.OnPeriodStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodEndTime", DbType="Time NOT NULL")]
		public System.TimeSpan PeriodEndTime
		{
			get
			{
				return this._PeriodEndTime;
			}
			set
			{
				if ((this._PeriodEndTime != value))
				{
					this.OnPeriodEndTimeChanging(value);
					this.SendPropertyChanging();
					this._PeriodEndTime = value;
					this.SendPropertyChanged("PeriodEndTime");
					this.OnPeriodEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommitPeriod_Commit", Storage="_Commits", ThisKey="PeriodID", OtherKey="PeriodID")]
		public EntitySet<Commit> Commits
		{
			get
			{
				return this._Commits;
			}
			set
			{
				this._Commits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.CommitPeriod = this;
		}
		
		private void detach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.CommitPeriod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commits")]
	public partial class Commit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitID;
		
		private string _CommitHash;
		
		private string _CommitMessages;
		
		private System.DateTime _CommitDate;
		
		private int _ConfigID;
		
		private System.Nullable<int> _AuthorID;
		
		private System.Nullable<int> _WeekId;
		
		private System.Nullable<int> _PeriodID;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<CommitSummary> _CommitSummaries;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<CommitPeriod> _CommitPeriod;
		
		private EntityRef<Week> _Week;
		
		private EntityRef<ConfigFile> _ConfigFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitIDChanging(int value);
    partial void OnCommitIDChanged();
    partial void OnCommitHashChanging(string value);
    partial void OnCommitHashChanged();
    partial void OnCommitMessagesChanging(string value);
    partial void OnCommitMessagesChanged();
    partial void OnCommitDateChanging(System.DateTime value);
    partial void OnCommitDateChanged();
    partial void OnConfigIDChanging(int value);
    partial void OnConfigIDChanged();
    partial void OnAuthorIDChanging(System.Nullable<int> value);
    partial void OnAuthorIDChanged();
    partial void OnWeekIdChanging(System.Nullable<int> value);
    partial void OnWeekIdChanged();
    partial void OnPeriodIDChanging(System.Nullable<int> value);
    partial void OnPeriodIDChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Commit()
		{
			this._CommitSummaries = new EntitySet<CommitSummary>(new Action<CommitSummary>(this.attach_CommitSummaries), new Action<CommitSummary>(this.detach_CommitSummaries));
			this._Author = default(EntityRef<Author>);
			this._CommitPeriod = default(EntityRef<CommitPeriod>);
			this._Week = default(EntityRef<Week>);
			this._ConfigFile = default(EntityRef<ConfigFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitID
		{
			get
			{
				return this._CommitID;
			}
			set
			{
				if ((this._CommitID != value))
				{
					this.OnCommitIDChanging(value);
					this.SendPropertyChanging();
					this._CommitID = value;
					this.SendPropertyChanged("CommitID");
					this.OnCommitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitHash", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string CommitHash
		{
			get
			{
				return this._CommitHash;
			}
			set
			{
				if ((this._CommitHash != value))
				{
					this.OnCommitHashChanging(value);
					this.SendPropertyChanging();
					this._CommitHash = value;
					this.SendPropertyChanged("CommitHash");
					this.OnCommitHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitMessages", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CommitMessages
		{
			get
			{
				return this._CommitMessages;
			}
			set
			{
				if ((this._CommitMessages != value))
				{
					this.OnCommitMessagesChanging(value);
					this.SendPropertyChanging();
					this._CommitMessages = value;
					this.SendPropertyChanged("CommitMessages");
					this.OnCommitMessagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitDate", DbType="DateTime NOT NULL")]
		public System.DateTime CommitDate
		{
			get
			{
				return this._CommitDate;
			}
			set
			{
				if ((this._CommitDate != value))
				{
					this.OnCommitDateChanging(value);
					this.SendPropertyChanging();
					this._CommitDate = value;
					this.SendPropertyChanged("CommitDate");
					this.OnCommitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigID", DbType="Int NOT NULL")]
		public int ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					if (this._ConfigFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int")]
		public System.Nullable<int> AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekId", DbType="Int")]
		public System.Nullable<int> WeekId
		{
			get
			{
				return this._WeekId;
			}
			set
			{
				if ((this._WeekId != value))
				{
					if (this._Week.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeekIdChanging(value);
					this.SendPropertyChanging();
					this._WeekId = value;
					this.SendPropertyChanged("WeekId");
					this.OnWeekIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodID", DbType="Int")]
		public System.Nullable<int> PeriodID
		{
			get
			{
				return this._PeriodID;
			}
			set
			{
				if ((this._PeriodID != value))
				{
					if (this._CommitPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPeriodIDChanging(value);
					this.SendPropertyChanging();
					this._PeriodID = value;
					this.SendPropertyChanged("PeriodID");
					this.OnPeriodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commit_CommitSummary", Storage="_CommitSummaries", ThisKey="CommitID", OtherKey="CommitID")]
		public EntitySet<CommitSummary> CommitSummaries
		{
			get
			{
				return this._CommitSummaries;
			}
			set
			{
				this._CommitSummaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_Commit", Storage="_Author", ThisKey="AuthorID", OtherKey="AuthorID", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Commits.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Commits.Add(this);
						this._AuthorID = value.AuthorID;
					}
					else
					{
						this._AuthorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CommitPeriod_Commit", Storage="_CommitPeriod", ThisKey="PeriodID", OtherKey="PeriodID", IsForeignKey=true)]
		public CommitPeriod CommitPeriod
		{
			get
			{
				return this._CommitPeriod.Entity;
			}
			set
			{
				CommitPeriod previousValue = this._CommitPeriod.Entity;
				if (((previousValue != value) 
							|| (this._CommitPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CommitPeriod.Entity = null;
						previousValue.Commits.Remove(this);
					}
					this._CommitPeriod.Entity = value;
					if ((value != null))
					{
						value.Commits.Add(this);
						this._PeriodID = value.PeriodID;
					}
					else
					{
						this._PeriodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CommitPeriod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Week_Commit", Storage="_Week", ThisKey="WeekId", OtherKey="WeekId", IsForeignKey=true)]
		public Week Week
		{
			get
			{
				return this._Week.Entity;
			}
			set
			{
				Week previousValue = this._Week.Entity;
				if (((previousValue != value) 
							|| (this._Week.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Week.Entity = null;
						previousValue.Commits.Remove(this);
					}
					this._Week.Entity = value;
					if ((value != null))
					{
						value.Commits.Add(this);
						this._WeekId = value.WeekId;
					}
					else
					{
						this._WeekId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Week");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigFile_Commit", Storage="_ConfigFile", ThisKey="ConfigID", OtherKey="ConfigID", IsForeignKey=true)]
		public ConfigFile ConfigFile
		{
			get
			{
				return this._ConfigFile.Entity;
			}
			set
			{
				ConfigFile previousValue = this._ConfigFile.Entity;
				if (((previousValue != value) 
							|| (this._ConfigFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConfigFile.Entity = null;
						previousValue.Commits.Remove(this);
					}
					this._ConfigFile.Entity = value;
					if ((value != null))
					{
						value.Commits.Add(this);
						this._ConfigID = value.ConfigID;
					}
					else
					{
						this._ConfigID = default(int);
					}
					this.SendPropertyChanged("ConfigFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitSummaries(CommitSummary entity)
		{
			this.SendPropertyChanging();
			entity.Commit = this;
		}
		
		private void detach_CommitSummaries(CommitSummary entity)
		{
			this.SendPropertyChanging();
			entity.Commit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommitSummary")]
	public partial class CommitSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommitSummaryID;
		
		private int _CommitID;
		
		private int _SummaryID;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntityRef<Commit> _Commit;
		
		private EntityRef<Summary> _Summary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommitSummaryIDChanging(int value);
    partial void OnCommitSummaryIDChanged();
    partial void OnCommitIDChanging(int value);
    partial void OnCommitIDChanged();
    partial void OnSummaryIDChanging(int value);
    partial void OnSummaryIDChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public CommitSummary()
		{
			this._Commit = default(EntityRef<Commit>);
			this._Summary = default(EntityRef<Summary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitSummaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommitSummaryID
		{
			get
			{
				return this._CommitSummaryID;
			}
			set
			{
				if ((this._CommitSummaryID != value))
				{
					this.OnCommitSummaryIDChanging(value);
					this.SendPropertyChanging();
					this._CommitSummaryID = value;
					this.SendPropertyChanged("CommitSummaryID");
					this.OnCommitSummaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommitID", DbType="Int NOT NULL")]
		public int CommitID
		{
			get
			{
				return this._CommitID;
			}
			set
			{
				if ((this._CommitID != value))
				{
					if (this._Commit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommitIDChanging(value);
					this.SendPropertyChanging();
					this._CommitID = value;
					this.SendPropertyChanged("CommitID");
					this.OnCommitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummaryID", DbType="Int NOT NULL")]
		public int SummaryID
		{
			get
			{
				return this._SummaryID;
			}
			set
			{
				if ((this._SummaryID != value))
				{
					if (this._Summary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSummaryIDChanging(value);
					this.SendPropertyChanging();
					this._SummaryID = value;
					this.SendPropertyChanged("SummaryID");
					this.OnSummaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commit_CommitSummary", Storage="_Commit", ThisKey="CommitID", OtherKey="CommitID", IsForeignKey=true)]
		public Commit Commit
		{
			get
			{
				return this._Commit.Entity;
			}
			set
			{
				Commit previousValue = this._Commit.Entity;
				if (((previousValue != value) 
							|| (this._Commit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commit.Entity = null;
						previousValue.CommitSummaries.Remove(this);
					}
					this._Commit.Entity = value;
					if ((value != null))
					{
						value.CommitSummaries.Add(this);
						this._CommitID = value.CommitID;
					}
					else
					{
						this._CommitID = default(int);
					}
					this.SendPropertyChanged("Commit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Summary_CommitSummary", Storage="_Summary", ThisKey="SummaryID", OtherKey="SummaryID", IsForeignKey=true)]
		public Summary Summary
		{
			get
			{
				return this._Summary.Entity;
			}
			set
			{
				Summary previousValue = this._Summary.Entity;
				if (((previousValue != value) 
							|| (this._Summary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Summary.Entity = null;
						previousValue.CommitSummaries.Remove(this);
					}
					this._Summary.Entity = value;
					if ((value != null))
					{
						value.CommitSummaries.Add(this);
						this._SummaryID = value.SummaryID;
					}
					else
					{
						this._SummaryID = default(int);
					}
					this.SendPropertyChanged("Summary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigFiles")]
	public partial class ConfigFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConfigID;
		
		private string _ConfigDirectory;
		
		private System.Nullable<int> _ConfigWeeks;
		
		private System.Nullable<System.DateTime> _FirstCommitDate;
		
		private string _FirstCommitAuthor;
		
		private int _InternshipDirectoryId;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<Commit> _Commits;
		
		private EntityRef<InternshipDirectory> _InternshipDirectory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConfigIDChanging(int value);
    partial void OnConfigIDChanged();
    partial void OnConfigDirectoryChanging(string value);
    partial void OnConfigDirectoryChanged();
    partial void OnConfigWeeksChanging(System.Nullable<int> value);
    partial void OnConfigWeeksChanged();
    partial void OnFirstCommitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFirstCommitDateChanged();
    partial void OnFirstCommitAuthorChanging(string value);
    partial void OnFirstCommitAuthorChanged();
    partial void OnInternshipDirectoryIdChanging(int value);
    partial void OnInternshipDirectoryIdChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public ConfigFile()
		{
			this._Commits = new EntitySet<Commit>(new Action<Commit>(this.attach_Commits), new Action<Commit>(this.detach_Commits));
			this._InternshipDirectory = default(EntityRef<InternshipDirectory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConfigID
		{
			get
			{
				return this._ConfigID;
			}
			set
			{
				if ((this._ConfigID != value))
				{
					this.OnConfigIDChanging(value);
					this.SendPropertyChanging();
					this._ConfigID = value;
					this.SendPropertyChanged("ConfigID");
					this.OnConfigIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigDirectory", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ConfigDirectory
		{
			get
			{
				return this._ConfigDirectory;
			}
			set
			{
				if ((this._ConfigDirectory != value))
				{
					this.OnConfigDirectoryChanging(value);
					this.SendPropertyChanging();
					this._ConfigDirectory = value;
					this.SendPropertyChanged("ConfigDirectory");
					this.OnConfigDirectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigWeeks", DbType="Int")]
		public System.Nullable<int> ConfigWeeks
		{
			get
			{
				return this._ConfigWeeks;
			}
			set
			{
				if ((this._ConfigWeeks != value))
				{
					this.OnConfigWeeksChanging(value);
					this.SendPropertyChanging();
					this._ConfigWeeks = value;
					this.SendPropertyChanged("ConfigWeeks");
					this.OnConfigWeeksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstCommitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FirstCommitDate
		{
			get
			{
				return this._FirstCommitDate;
			}
			set
			{
				if ((this._FirstCommitDate != value))
				{
					this.OnFirstCommitDateChanging(value);
					this.SendPropertyChanging();
					this._FirstCommitDate = value;
					this.SendPropertyChanged("FirstCommitDate");
					this.OnFirstCommitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstCommitAuthor", DbType="NVarChar(255)")]
		public string FirstCommitAuthor
		{
			get
			{
				return this._FirstCommitAuthor;
			}
			set
			{
				if ((this._FirstCommitAuthor != value))
				{
					this.OnFirstCommitAuthorChanging(value);
					this.SendPropertyChanging();
					this._FirstCommitAuthor = value;
					this.SendPropertyChanged("FirstCommitAuthor");
					this.OnFirstCommitAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipDirectoryId", DbType="Int NOT NULL")]
		public int InternshipDirectoryId
		{
			get
			{
				return this._InternshipDirectoryId;
			}
			set
			{
				if ((this._InternshipDirectoryId != value))
				{
					if (this._InternshipDirectory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInternshipDirectoryIdChanging(value);
					this.SendPropertyChanging();
					this._InternshipDirectoryId = value;
					this.SendPropertyChanged("InternshipDirectoryId");
					this.OnInternshipDirectoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ConfigFile_Commit", Storage="_Commits", ThisKey="ConfigID", OtherKey="ConfigID")]
		public EntitySet<Commit> Commits
		{
			get
			{
				return this._Commits;
			}
			set
			{
				this._Commits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InternshipDirectory_ConfigFile", Storage="_InternshipDirectory", ThisKey="InternshipDirectoryId", OtherKey="InternshipDirectoryId", IsForeignKey=true)]
		public InternshipDirectory InternshipDirectory
		{
			get
			{
				return this._InternshipDirectory.Entity;
			}
			set
			{
				InternshipDirectory previousValue = this._InternshipDirectory.Entity;
				if (((previousValue != value) 
							|| (this._InternshipDirectory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InternshipDirectory.Entity = null;
						previousValue.ConfigFiles.Remove(this);
					}
					this._InternshipDirectory.Entity = value;
					if ((value != null))
					{
						value.ConfigFiles.Add(this);
						this._InternshipDirectoryId = value.InternshipDirectoryId;
					}
					else
					{
						this._InternshipDirectoryId = default(int);
					}
					this.SendPropertyChanged("InternshipDirectory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.ConfigFile = this;
		}
		
		private void detach_Commits(Commit entity)
		{
			this.SendPropertyChanging();
			entity.ConfigFile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InternshipDirectories")]
	public partial class InternshipDirectory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InternshipDirectoryId;
		
		private string _InternshipWeekFolder;
		
		private System.DateTime _InternshipStartDate;
		
		private System.DateTime _InternshipEndDate;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<ConfigFile> _ConfigFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInternshipDirectoryIdChanging(int value);
    partial void OnInternshipDirectoryIdChanged();
    partial void OnInternshipWeekFolderChanging(string value);
    partial void OnInternshipWeekFolderChanged();
    partial void OnInternshipStartDateChanging(System.DateTime value);
    partial void OnInternshipStartDateChanged();
    partial void OnInternshipEndDateChanging(System.DateTime value);
    partial void OnInternshipEndDateChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public InternshipDirectory()
		{
			this._ConfigFiles = new EntitySet<ConfigFile>(new Action<ConfigFile>(this.attach_ConfigFiles), new Action<ConfigFile>(this.detach_ConfigFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipDirectoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InternshipDirectoryId
		{
			get
			{
				return this._InternshipDirectoryId;
			}
			set
			{
				if ((this._InternshipDirectoryId != value))
				{
					this.OnInternshipDirectoryIdChanging(value);
					this.SendPropertyChanging();
					this._InternshipDirectoryId = value;
					this.SendPropertyChanged("InternshipDirectoryId");
					this.OnInternshipDirectoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipWeekFolder", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string InternshipWeekFolder
		{
			get
			{
				return this._InternshipWeekFolder;
			}
			set
			{
				if ((this._InternshipWeekFolder != value))
				{
					this.OnInternshipWeekFolderChanging(value);
					this.SendPropertyChanging();
					this._InternshipWeekFolder = value;
					this.SendPropertyChanged("InternshipWeekFolder");
					this.OnInternshipWeekFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime InternshipStartDate
		{
			get
			{
				return this._InternshipStartDate;
			}
			set
			{
				if ((this._InternshipStartDate != value))
				{
					this.OnInternshipStartDateChanging(value);
					this.SendPropertyChanging();
					this._InternshipStartDate = value;
					this.SendPropertyChanged("InternshipStartDate");
					this.OnInternshipStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternshipEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime InternshipEndDate
		{
			get
			{
				return this._InternshipEndDate;
			}
			set
			{
				if ((this._InternshipEndDate != value))
				{
					this.OnInternshipEndDateChanging(value);
					this.SendPropertyChanging();
					this._InternshipEndDate = value;
					this.SendPropertyChanged("InternshipEndDate");
					this.OnInternshipEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InternshipDirectory_ConfigFile", Storage="_ConfigFiles", ThisKey="InternshipDirectoryId", OtherKey="InternshipDirectoryId")]
		public EntitySet<ConfigFile> ConfigFiles
		{
			get
			{
				return this._ConfigFiles;
			}
			set
			{
				this._ConfigFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConfigFiles(ConfigFile entity)
		{
			this.SendPropertyChanging();
			entity.InternshipDirectory = this;
		}
		
		private void detach_ConfigFiles(ConfigFile entity)
		{
			this.SendPropertyChanging();
			entity.InternshipDirectory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Summary")]
	public partial class Summary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SummaryID;
		
		private string _Attendance;
		
		private string _AssignedTasks;
		
		private string _ContentResults;
		
		private string _SupervisorComments;
		
		private string _Notes;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _UpdatedAt;
		
		private EntitySet<CommitSummary> _CommitSummaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSummaryIDChanging(int value);
    partial void OnSummaryIDChanged();
    partial void OnAttendanceChanging(string value);
    partial void OnAttendanceChanged();
    partial void OnAssignedTasksChanging(string value);
    partial void OnAssignedTasksChanged();
    partial void OnContentResultsChanging(string value);
    partial void OnContentResultsChanged();
    partial void OnSupervisorCommentsChanging(string value);
    partial void OnSupervisorCommentsChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    #endregion
		
		public Summary()
		{
			this._CommitSummaries = new EntitySet<CommitSummary>(new Action<CommitSummary>(this.attach_CommitSummaries), new Action<CommitSummary>(this.detach_CommitSummaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SummaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SummaryID
		{
			get
			{
				return this._SummaryID;
			}
			set
			{
				if ((this._SummaryID != value))
				{
					this.OnSummaryIDChanging(value);
					this.SendPropertyChanging();
					this._SummaryID = value;
					this.SendPropertyChanged("SummaryID");
					this.OnSummaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attendance", DbType="NVarChar(MAX)")]
		public string Attendance
		{
			get
			{
				return this._Attendance;
			}
			set
			{
				if ((this._Attendance != value))
				{
					this.OnAttendanceChanging(value);
					this.SendPropertyChanging();
					this._Attendance = value;
					this.SendPropertyChanged("Attendance");
					this.OnAttendanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedTasks", DbType="NVarChar(MAX)")]
		public string AssignedTasks
		{
			get
			{
				return this._AssignedTasks;
			}
			set
			{
				if ((this._AssignedTasks != value))
				{
					this.OnAssignedTasksChanging(value);
					this.SendPropertyChanging();
					this._AssignedTasks = value;
					this.SendPropertyChanged("AssignedTasks");
					this.OnAssignedTasksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentResults", DbType="NVarChar(MAX)")]
		public string ContentResults
		{
			get
			{
				return this._ContentResults;
			}
			set
			{
				if ((this._ContentResults != value))
				{
					this.OnContentResultsChanging(value);
					this.SendPropertyChanging();
					this._ContentResults = value;
					this.SendPropertyChanged("ContentResults");
					this.OnContentResultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupervisorComments", DbType="NVarChar(MAX)")]
		public string SupervisorComments
		{
			get
			{
				return this._SupervisorComments;
			}
			set
			{
				if ((this._SupervisorComments != value))
				{
					this.OnSupervisorCommentsChanging(value);
					this.SendPropertyChanging();
					this._SupervisorComments = value;
					this.SendPropertyChanged("SupervisorComments");
					this.OnSupervisorCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._UpdatedAt;
			}
			set
			{
				if ((this._UpdatedAt != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._UpdatedAt = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Summary_CommitSummary", Storage="_CommitSummaries", ThisKey="SummaryID", OtherKey="SummaryID")]
		public EntitySet<CommitSummary> CommitSummaries
		{
			get
			{
				return this._CommitSummaries;
			}
			set
			{
				this._CommitSummaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommitSummaries(CommitSummary entity)
		{
			this.SendPropertyChanging();
			entity.Summary = this;
		}
		
		private void detach_CommitSummaries(CommitSummary entity)
		{
			this.SendPropertyChanging();
			entity.Summary = null;
		}
	}
}
#pragma warning restore 1591
